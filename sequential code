#include <mpi.h>
#include <stdio.h>
#include <stdlib.h> 
#include <math.h>

int main(int argc, char** argv) {
    int rank, size;
    float a = 0.0f, b = 1.0f;  // Limits of integration
    int n;
    float start, end, local_area, total_area, start_time, end_time;
    int steps = 0, local_steps = 0, total_steps = 0;

    MPI_Init(&argc, &argv); // Initialize MPI
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); // Get rank of the process
    MPI_Comm_size(MPI_COMM_WORLD, &size); // Get number of processes

    start_time = MPI_Wtime();

    printf("Enter the number n: ");
    scanf("%d", &n);

    int* prime = (int*)malloc((n*n) * sizeof(int));
    for (int i = 2; i<=n*n; i++){
        prime[i] = 1;
    }

    int count = 0;
    for (int i = 2; count < n && i < n * n; i++) {
        if (prime[i] == 1) {
            // Mark multiples of i as non-prime
            for (int j = i * 2; j < n * n; j += i) {
                prime[j] = 0;
            }

            // Increment the prime count and print the prime number
            printf("%d ", i);
            count++;

        }
    }
    

    end_time = MPI_Wtime();

    if (rank == 0) {
        printf("\n");
        printf("The total time needed is: %f\n", end_time - start_time);
    }

    MPI_Finalize(); // Finalize MPI
    return 0;
}
